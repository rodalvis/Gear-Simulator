#include <LiquidCrystal.h>
LiquidCrystal lcd(8,9,4,5,6,7);  

#define tamanho_vetor(vetor_tamanho) (sizeof(vetor_tamanho)/sizeof(int)) 


int rosc_ii[] ={8,9,10,11,12,13,14,15,16,17,18,19,20};  // fios por polegada
float rosc_mm[] = {0.25,0.50,0.85,1.0,1.25,1.50,1.75,2.0};  //Rosca passo em milimetro
   
volatile unsigned short int count = 0;
//Pinagem do Motor e Encoder
#define motor A5 // EN habilita o motor
#define dir 11 // DIR determina a direção
#define pul 13 // PUL envia pulsos
#define enca 2 // Fio A encoder
#define encb 3 // Fio B encoder

//Prototipagem das Funções
//int tamanho_vetor(int vetor_tamanho);
void Motor_Estado();
void V_On_Off();
void V_Dir_Esq();
void Direcao();
void gira(float passo);
void ai0();
void ai1();
void int2pul();
void WaitBtnRelease();
char ReadKeypad();
void MainMenuBtn();
boolean rosca=false;

  //Variaveis Globais
short int intervalo = 100; //--------------------------------------------------------------------------------------
unsigned int v_bt;
boolean pulso = LOW; 
char btn_push;
boolean a = LOW;
boolean b = LOW; 
int keypad_pin = A0;
int keypad_value = 0;
int keypad_value_old = 0;
byte mainMenuPage = 1;
byte mainMenuPageOld = 1;
byte mainMenuTotal = 4;
void MainMenuDisplay();


void setup()
{      
  pinMode(enca, INPUT_PULLUP); // internal pullup input pin 2 
  pinMode(encb, INPUT_PULLUP); // internal pullup input pin 3
 
  attachInterrupt(0, ai0, RISING); //"cadastra" a função ai0 para função a ser executada caso o pino 2 tenha o estado mudado de HIGH ou LOW(qualquer interação no pino será executado a função ai0)
  attachInterrupt(1, ai1 , RISING); //"cadastra" a função ai1 para função a ser executada caso o pino 3 tenha o estado mudado de HIGH ou LOW(qualquer interação no pino será executado a função ai1) 
  
    pinMode(motor, OUTPUT);
    pinMode(dir, OUTPUT);
    pinMode(pul, OUTPUT);

Serial.begin(9600);
        
    lcd.begin(16,2);  //Initialize a 2x16 type LCD
    MainMenuDisplay();
    
}
void loop()
{
    // Serial.println(count); -------------------------------------------
    btn_push = ReadKeypad();

    MainMenuBtn();
   
    if(btn_push == 'S')//enter selected menu
    {
        WaitBtnRelease();
        switch (mainMenuPage)
        {
            case 1:
              MenuA();
              break;
            case 2:
              MenuB();
              break;
            case 3:
              MenuC();
              break;
            case 4:
              MenuD();
              break;
        }
 
          MainMenuDisplay();
          WaitBtnRelease();
    }
 
}//--------------- End of loop() loop ---------------------
void MenuA()                            //Função de Menu de Direção
{  
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Direcao < >");
    
    while(ReadKeypad()!= 'L')
    {   
        //Insert Task for Menu A here
        V_Dir_Esq();
        if(ReadKeypad() == 'R'){
        Direcao();
        delay(150);}
        
        }    
    }
int MenuB()                              //Função de Menu da Rosca Metrica
{     unsigned short int r = 0;
    while(ReadKeypad()!= 'L')
    {
     
    lcd.setCursor(0,0);
    lcd.print("Rosca Metrica");  
      
        lcd.setCursor(1,1);
        lcd.print(rosc_mm[r]);
        lcd.print("MM");
        V_On_Off();
        intervalo = intervalo_mm(rosc_mm[r]);      
        if(ReadKeypad() == 'R' && !(intervalo==0)){
        delay(100);     //Delay de Segurança NÃO RETIRAR.
        rosca = !rosca;
        Motor_Estado();
        V_On_Off();
        int2pul();    //envia pulsos a cada N intervalos  
        delay(100);
        }
        else if(ReadKeypad() == 'U' && r < (sizeof(rosc_mm)/sizeof(int)) ){ 
        r++;
        delay(100);
        }
        else if(ReadKeypad() == 'D' &&  r >= rosc_mm[0] ){
        lcd.clear();
        r--;
        delay(100);
    }
}
}
int MenuC(){  
  unsigned short int r = 0 ;//Função de Menu da Rosca Polegada
    while(ReadKeypad()!= 'L'){  
         
    
    lcd.setCursor(0,0);
    lcd.print("Rosca Polegada");
        lcd.setCursor(1,1);
        lcd.print(rosc_ii[r]);
        lcd.print("TPI");
        V_On_Off();
        intervalo = intervalo_ii(rosc_ii[r]);      
        if(ReadKeypad() == 'R'){
        delay(100);     //Delay de Segurança NÃO RETIRAR.
        rosca = !rosca;
        Motor_Estado();
        V_On_Off();
        int2pul();    //envia pulsos a cada N intervalos  
        delay(100);
        }
        else if(ReadKeypad() == 'U' && r < (sizeof(rosc_ii)/sizeof(int))){ 
        r++;
        delay(100);
        }
        else if(ReadKeypad() == 'D' && r >= rosc_ii[0] ){
        lcd.clear();
        r--;
        delay(100);}
}
}
void MenuD(){                     //Função de Menu do Passo Desejado
  float passo = 0.10;               //passo minimo 1mm
    while(ReadKeypad()!= 'L'){     
          lcd.setCursor(0,0);
          lcd.print("Passo Desejado");
          lcd.setCursor(0,1);
          lcd.print(passo);
          lcd.print(" mm");
          V_On_Off();          
          gira(passo); 
        if(ReadKeypad() == 'R'){
        Motor_Estado();
        delay(100);
        }
        else if(ReadKeypad() == 'U' && passo <= 9.9){ 
        passo+=0.1;
        delay(100);
        }
        else if(ReadKeypad() == 'D' && passo >= 0.1){
        lcd.clear();
        passo-=0.1;
        delay(100);
        }     
        
    }
}

void V_On_Off(){                        //printa na tela lcd o estado do motor
  lcd.setCursor(8,1);
  a ? lcd.print("ON ") : lcd.print("OFF ");
  }

void V_Dir_Esq(){                       //printa na tela lcd o sentido de giro do motor
  lcd.setCursor(3,1);
 b ? lcd.print("Esquerda") : lcd.print("Direita ");
 }  
 
void Direcao(){                     //muda o sentido de giro do motor. De direita para esquerda ou esquerda para direita
  switch(b){
  case true :
  digitalWrite(dir,LOW);
  b = !b;
  break;
  case false:
  digitalWrite(dir,HIGH);
  b = !b;
  break;
  }
}
void Motor_Estado(){                  //muda o estado do motor. De ligado para desligado ou desligado para ligado
  switch(a){
  case true :
  analogWrite(motor,HIGH);
  a = !a;
  break;
  case false:
  analogWrite(motor,LOW);
  a = !a;
  break; 
    } 
}
void gira(float passo){                                  //Função para gerar pulsos para o motor girar.Usada na função passo desejado  
  while(a){
   pulso = !pulso; //inverte o estado da variável
  digitalWrite(pul, pulso); //atribui o novo estado à porta
  delay(10/passo);
  //delayMicroseconds(900); 
  if(ReadKeypad() == 'R'){
    Motor_Estado();
    delay(100);}
           }
  }

int intervalo_mm(float rosca_milimetro){
  return(1200/(200/(3.18*rosca_milimetro)));     //calculo intervalo para rosca milimetro
}

int intervalo_ii(int rosca_polegada){
  return(1200/(200/(3.18*(25.4/rosca_polegada)))); //calculo intervalo para rosca polegada
}



void int2pul(){
  while(a){    
 if(ReadKeypad() == 'R'){
    rosca = !rosca;
    Motor_Estado();
    delay(100);}
  }     
}

void ai0()
{ 
  if(count>=intervalo && rosca){  
    count = 0;
    digitalWrite(pul,HIGH);
    delay(intervalo);
    digitalWrite(pul,LOW); }
  else if (digitalRead(3) == LOW)
  {  count++; }
  else
  {  count--; }
}

void ai1()
{
 if(count>=intervalo && rosca){  
    count = 0;
    digitalWrite(pul,HIGH);
    delay(intervalo);
    digitalWrite(pul,LOW); }
  else if (digitalRead(2) == LOW)
  {  count--; }
  else
  {  count++; }
}

void MainMenuDisplay(){
    lcd.clear();
    lcd.setCursor(0,0);
    switch (mainMenuPage)
    {
        case 1:
          lcd.print("Direcao < >");
          break;
        case 2:
          lcd.print("Rosca_Metrica");
          break;
        case 3:
          lcd.print("Rosca_Polegada");
          break;
        case 4:
          lcd.print("Passo_Desejado");
          break;
    }
}
 
void MainMenuBtn()
{
    WaitBtnRelease();
    if(btn_push == 'U')
    {
        mainMenuPage++;
        if(mainMenuPage > mainMenuTotal)
          mainMenuPage = 1;
    }
    else if(btn_push == 'D')
    {
        mainMenuPage--;
        if(mainMenuPage == 0)
          mainMenuPage = mainMenuTotal;    
    }
   
    if(mainMenuPage != mainMenuPageOld) //only update display when page change
    {
        MainMenuDisplay();
        mainMenuPageOld = mainMenuPage;
    }
}
 
char ReadKeypad()
{
  /* Keypad button analog Value
  no button pressed 1023
  select  741
  left    503
  down    326
  up      142
  right   0
  */
  keypad_value = analogRead(keypad_pin);
 
  if(keypad_value < 100)
    return 'R';
  else if(keypad_value < 200)
    return 'U';
  else if(keypad_value < 400)
    return 'D';
  else if(keypad_value < 600)
    return 'L';
  else if(keypad_value < 800)
    return 'S';
  else
    return 'N';
 
}
 
void WaitBtnRelease()
{
    while( analogRead(keypad_pin) < 800){}
}
